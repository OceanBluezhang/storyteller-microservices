{
  "name": "Storyteller-microservices",
  "tagline": "Spring Cloud Netflix Storyteller Microservices",
  "body": "# storyteller-microservices\r\n\r\nStoryteller Microservices implemented with Spring Boot + Spring Cloud Netflix\r\n\r\n* **archimedes**: acts as Eureka Server. Endpoint: `http://localhost:8761`\r\n* **config-server**: external config server from a [Git Repo](https://github.com/codependent/storyteller-microservices-config). Endpoint: `http://localhost:8888`\r\n* **hystrix-dashboard**: aggretated metrics using Turbine. IMPORTANT: overrides some Turbine files to allow having multiple applications on the same host. [More info](https://github.com/Netflix/Turbine/pull/105). Endpoint: `http://localhost:10000`\r\n* **images-ms**: mid-tier Eureka Client that returns a random image URL. Endpoint: `http://localhost:9999/images?random=true&fields=url`\r\n* **stories-ms**: mid-tier Eureka Client that generates a random HTML story inserting a random image gotten from the previous service. Endpoint: `http://localhost:9988/stories?random=true`\r\n* **storyteller-api**: (master/high-availability branches) API Eureka Client that invokes stories-ms, using a **Feign** client, to get a random story. Endpoint: `http://localhost:9977/api/stories?random=true`\r\n* **gatekeeper**: (zuul/high-availability branches) Zuul edge service that substitutes storyteller-api as the external entry point. Endpoint: `http://localhost:9977/api/stories?random=true`\r\n\r\nThis structure tries to simulate a scenario like the following:\r\n\r\n![Microservices architecture](https://raw.githubusercontent.com/codependent/storyteller-microservices/master/diagram.png)\r\n\r\nOne API service exposed to clients and two mid tier services, all of them sharing a Eureka server instance (Archimedes) and a ConfigServer that loads the properties from a Git repo.\r\n\r\n***Branch differences***\r\n\r\n* **master**: storyteller-api acts as a gateway for the internal microservices and uses a Feign client to invoke stories-ms. **[At the moment](https://github.com/Netflix/feign/issues/298) there is no way to specify a fallback method for Feign clients.**\r\n* **no-config-server**: same as master without using a centralized config-server.\r\n* **zuul**: uses a zuul reverse-proxy instead of storyteller-api gateway.\r\n* **high-availability**: high availability environment using two eureka registers, a zuul reverse proxy, and 2 instances of each service.\r\n* **high-availability-rxjava**: Same as above but using reactive programming. It also adds 2 **Spring Cloud Stream** microservices, a log processor and a central logger. Uses **Spring Cloud Sleuth** in all microservices for request tracing in **Zipkin**.\r\n* **high-availability-rxjava-sidecar**: Polyglot version in which Sidecar integrates a Node.js microservice.\r\n* **consul**: Consul replaces Eureka Server as microservice registry.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}